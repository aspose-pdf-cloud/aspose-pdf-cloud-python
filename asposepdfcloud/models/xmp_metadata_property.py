# coding: utf-8

"""
    Aspose.PDF Cloud API Reference


Copyright (c) 2025 Aspose.PDF Cloud
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



    OpenAPI spec version: 3.0
    
"""


from pprint import pformat
from six import iteritems
import re


class XmpMetadataProperty(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'value': 'str',
        'namespace_uri': 'str'
    }

    attribute_map = {
        'key': 'Key',
        'value': 'Value',
        'namespace_uri': 'NamespaceUri'
    }

    def __init__(self, key=None, value=None, namespace_uri=None):
        """
        XmpMetadataProperty - a model defined in Swagger
        """

        self._key = None
        self._value = None
        self._namespace_uri = None

        self.key = key
        if value is not None:
          self.value = value
        if namespace_uri is not None:
          self.namespace_uri = namespace_uri

    @property
    def key(self):
        """
        Gets the key of this XmpMetadataProperty.
        Xmp Metadata Property Key. Can take the form for default keys: xmp:DefaultKeyName or DefaultKeyName. Form for user defined properties: customNamespace:UserPropertyName.

        :return: The key of this XmpMetadataProperty.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this XmpMetadataProperty.
        Xmp Metadata Property Key. Can take the form for default keys: xmp:DefaultKeyName or DefaultKeyName. Form for user defined properties: customNamespace:UserPropertyName.

        :param key: The key of this XmpMetadataProperty.
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")
        if key is not None and len(key) < 1:
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `1`")

        self._key = key

    @property
    def value(self):
        """
        Gets the value of this XmpMetadataProperty.
        Xmp Metadata Property Value. Null for delete property.

        :return: The value of this XmpMetadataProperty.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this XmpMetadataProperty.
        Xmp Metadata Property Value. Null for delete property.

        :param value: The value of this XmpMetadataProperty.
        :type: str
        """

        self._value = value

    @property
    def namespace_uri(self):
        """
        Gets the namespace_uri of this XmpMetadataProperty.
        Namespace Uri. For user defined properties only.

        :return: The namespace_uri of this XmpMetadataProperty.
        :rtype: str
        """
        return self._namespace_uri

    @namespace_uri.setter
    def namespace_uri(self, namespace_uri):
        """
        Sets the namespace_uri of this XmpMetadataProperty.
        Namespace Uri. For user defined properties only.

        :param namespace_uri: The namespace_uri of this XmpMetadataProperty.
        :type: str
        """

        self._namespace_uri = namespace_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, XmpMetadataProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
